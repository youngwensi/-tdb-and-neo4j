一、从推理场景来分析：
知识图谱推理分类：1）基于描述逻辑系统的规则硬推理 和 2）基于任务型的统计软推理
1）	基于描述逻辑系统的规则硬推理
本体语言,定义了知识的描述逻辑；公理系统，使得能在描述逻辑上进行逻辑推理，推理出结果都是实打实的硬逻辑。这类推理适合对推理
结果要求十分准确的场景。这类场景使用jena进行推理相对有优势，原因如下：
jena提供RDFS规则推理机，OWL推理机，以及通用规则推理机；
RDFS/OWL推理机都是基于逻辑系统的推理，RDFS/OWL定义了用于资源描述的词汇如class、domain、range等，本身蕴含一定的逻辑。
通用规则推理机也可根据场景自定义推理方案。
某些推理的逻辑规则在jena的推理器中已经设置好，可直接调用，使用较为方便。
但是存在一定的问题，如：
在公理的基础上进行硬推理，如计算交集，并集等，这些预定义的规则有限，使得RDF/OWL 推理有限。
使用逻辑推理需要对定义资源描述的词汇如class、domain、range进行配置，这部分配置工作会较为繁琐和难维护。
在组合大型数据集和复杂本体时推理速度会十分缓慢（因为所有数据存在于内存中，数据量大时，性能成为瓶颈），结果也不可预测。

2）	基于任务型的推理
通常基于任务型的推理需求，比如推荐系统，结合图的结构、图路径等信息解决某类问题，该类任务通常还需要其他技术的辅助来实现，比如统计规则、概率等。这类推理适合对推理的确定性要求不是十分严格的场景。
这类场景使用neo4j进行推理相对有优势，原因如下：
Neo4j为属性图，在属性图上运用图算法来进行计算推理和数据分析会比较方便，如根据结点的出度或入度推理出热点（中心点）。
Neo4j支持60多种图算法，包括最短路径及搜索，中心度/重要性计算、相似度计算、以及链接预测等。路径计算或者相似度计算可推理用户可能感兴趣的内容，从而对此类内容进行推荐。
但是存在一定的问题，如：
目前neo4j推理插件n10s的推理仍是结合属性和数据的关系链路的推理，基于逻辑的推理实现较为繁琐，要用额外的代码实现。

二、基于推理工具的分析
1）Neo4j提供推理插件Neosemantics（n10s），插件功能如下：
多种格式导入/导出RDF
导入导出模型映射
本体导入导出
推理，其推理是基于数据关系链路，进行前向和后向推理。
举个例子： 推理用户A对物理光学领域的什么书感兴趣—》已知用户对光学晶体学的书和应用矿物学的书感兴趣，我们首先可以找到物理光学的子领域晶体光学，晶体光学下有一本光学晶体学的书，则可推理出用户对光学晶体学的书感兴趣，虽然并没有直接标记光学晶体学是属于物理光学领域。
 
2）Jena提供的推理机有：
RDFS规则推理器：实现了RDFS 公理和闭包规则。
举个例子：定义投资这种关系的domain是投资人，range是公司。可以简单的认为，投资这种关系的头节点都是投资人这种类型、尾节点都是公司这种类型。假设现在有一条事实是大卫*切瑞顿 投资 谷歌 。则可以推理出，大卫*切瑞顿的类型是投资人。这个例子，便是利用了RDFS本身蕴含的语义和逻辑，来进行推理。
 
由于缺乏丰富的表达能力，RDFS规则推理能力也不强。此外官网标注：Jena RDFS 实现尚未通过数据库模型进行测试和评估，Jena 架构使构建此类模型变得容易，但是在没有缓存的情况下，预计性能会很差。
部分RDFS 公理如下：
 
OWL规则推理器：OWL/full 的 OWL/lite 子集的基于规则的实现。OWL 规则推理器适合具有相对简单、规则本体的实例推理，不适合在大型丰富本体上进行推理。Owl的规则如下，主要是交集并集的计算，以及互斥，传递等的规则：
 
通用规则推理器：基于规则的推理器，支持用户定义的规则。支持正向链接、反向链接和混合执行策略。
正向链接就是从一组表示事实的命题出发，使用一组产生式规则，用以证明命题是否成立。通俗讲就是从知识库已有的规则和知识来推理出隐含知识。
反向链接就是从目标命题出发，使用一组规则证明命题成立，也就是提出一批假设（目标），然后逐一验证这些假设。
混合执行即同时结合正向链接和反向链接。
举个例子：
 
